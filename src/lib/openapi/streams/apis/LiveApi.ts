/* tslint:disable */
/* eslint-disable */
/**
 * Streams
 * Streams API
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: nathanfaucett@email.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelsAnswerST,
  ModelsOfferBodyST,
  ModelsResponseErrorST,
} from '../models';
import {
    ModelsAnswerSTFromJSON,
    ModelsAnswerSTToJSON,
    ModelsOfferBodySTFromJSON,
    ModelsOfferBodySTToJSON,
    ModelsResponseErrorSTFromJSON,
    ModelsResponseErrorSTToJSON,
} from '../models';

export interface CamerasCameraIdLiveCodecsGetRequest {
    cameraId: string;
}

export interface CamerasCameraIdLiveSdpPostRequest {
    cameraId: string;
    offer: ModelsOfferBodyST;
}

/**
 * LiveApi - interface
 * 
 * @export
 * @interface LiveApiInterface
 */
export interface LiveApiInterface {
    /**
     * get camera live codecs
     * @summary Get Live Codecs
     * @param {string} cameraId Camera ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    camerasCameraIdLiveCodecsGetRaw(requestParameters: CamerasCameraIdLiveCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * get camera live codecs
     * Get Live Codecs
     */
    camerasCameraIdLiveCodecsGet(requestParameters: CamerasCameraIdLiveCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * send live offer for camera by id
     * @summary Send live offer
     * @param {string} cameraId Camera ID
     * @param {ModelsOfferBodyST} offer Offer body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    camerasCameraIdLiveSdpPostRaw(requestParameters: CamerasCameraIdLiveSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAnswerST>>;

    /**
     * send live offer for camera by id
     * Send live offer
     */
    camerasCameraIdLiveSdpPost(requestParameters: CamerasCameraIdLiveSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAnswerST>;

}

/**
 * 
 */
export class LiveApi extends runtime.BaseAPI implements LiveApiInterface {

    /**
     * get camera live codecs
     * Get Live Codecs
     */
    async camerasCameraIdLiveCodecsGetRaw(requestParameters: CamerasCameraIdLiveCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.cameraId === null || requestParameters.cameraId === undefined) {
            throw new runtime.RequiredError('cameraId','Required parameter requestParameters.cameraId was null or undefined when calling camerasCameraIdLiveCodecsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cameras/{cameraId}/live/codecs`.replace(`{${"cameraId"}}`, encodeURIComponent(String(requestParameters.cameraId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get camera live codecs
     * Get Live Codecs
     */
    async camerasCameraIdLiveCodecsGet(requestParameters: CamerasCameraIdLiveCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.camerasCameraIdLiveCodecsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * send live offer for camera by id
     * Send live offer
     */
    async camerasCameraIdLiveSdpPostRaw(requestParameters: CamerasCameraIdLiveSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAnswerST>> {
        if (requestParameters.cameraId === null || requestParameters.cameraId === undefined) {
            throw new runtime.RequiredError('cameraId','Required parameter requestParameters.cameraId was null or undefined when calling camerasCameraIdLiveSdpPost.');
        }

        if (requestParameters.offer === null || requestParameters.offer === undefined) {
            throw new runtime.RequiredError('offer','Required parameter requestParameters.offer was null or undefined when calling camerasCameraIdLiveSdpPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cameras/{cameraId}/live/sdp`.replace(`{${"cameraId"}}`, encodeURIComponent(String(requestParameters.cameraId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsOfferBodySTToJSON(requestParameters.offer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAnswerSTFromJSON(jsonValue));
    }

    /**
     * send live offer for camera by id
     * Send live offer
     */
    async camerasCameraIdLiveSdpPost(requestParameters: CamerasCameraIdLiveSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAnswerST> {
        const response = await this.camerasCameraIdLiveSdpPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
