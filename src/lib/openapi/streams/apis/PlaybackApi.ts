/* tslint:disable */
/* eslint-disable */
/**
 * Streams
 * Streams API
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: nathanfaucett@email.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelsAnswerST,
  ModelsOfferBodyST,
  ModelsResponseErrorST,
} from '../models';
import {
    ModelsAnswerSTFromJSON,
    ModelsAnswerSTToJSON,
    ModelsOfferBodySTFromJSON,
    ModelsOfferBodySTToJSON,
    ModelsResponseErrorSTFromJSON,
    ModelsResponseErrorSTToJSON,
} from '../models';

export interface CamerasCameraIdPlaybackPostRequest {
    cameraId: string;
    start: string;
}

export interface PlaybackPlaybackIdCodecsGetRequest {
    playbackId: string;
}

export interface PlaybackPlaybackIdSdpPostRequest {
    playbackId: string;
    offer: ModelsOfferBodyST;
}

/**
 * PlaybackApi - interface
 * 
 * @export
 * @interface PlaybackApiInterface
 */
export interface PlaybackApiInterface {
    /**
     * create a new camera playback
     * @summary Create Playback
     * @param {string} cameraId Camera ID
     * @param {string} start Playback start time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackApiInterface
     */
    camerasCameraIdPlaybackPostRaw(requestParameters: CamerasCameraIdPlaybackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * create a new camera playback
     * Create Playback
     */
    camerasCameraIdPlaybackPost(requestParameters: CamerasCameraIdPlaybackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * get camera playback codecs
     * @summary Get Playbaack Codecs
     * @param {string} playbackId Playback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackApiInterface
     */
    playbackPlaybackIdCodecsGetRaw(requestParameters: PlaybackPlaybackIdCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * get camera playback codecs
     * Get Playbaack Codecs
     */
    playbackPlaybackIdCodecsGet(requestParameters: PlaybackPlaybackIdCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * send playback offer for camera by id
     * @summary Send playback offer
     * @param {string} playbackId Playback ID
     * @param {ModelsOfferBodyST} offer Offer body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackApiInterface
     */
    playbackPlaybackIdSdpPostRaw(requestParameters: PlaybackPlaybackIdSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAnswerST>>;

    /**
     * send playback offer for camera by id
     * Send playback offer
     */
    playbackPlaybackIdSdpPost(requestParameters: PlaybackPlaybackIdSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAnswerST>;

}

/**
 * 
 */
export class PlaybackApi extends runtime.BaseAPI implements PlaybackApiInterface {

    /**
     * create a new camera playback
     * Create Playback
     */
    async camerasCameraIdPlaybackPostRaw(requestParameters: CamerasCameraIdPlaybackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.cameraId === null || requestParameters.cameraId === undefined) {
            throw new runtime.RequiredError('cameraId','Required parameter requestParameters.cameraId was null or undefined when calling camerasCameraIdPlaybackPost.');
        }

        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling camerasCameraIdPlaybackPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cameras/{cameraId}/playback`.replace(`{${"cameraId"}}`, encodeURIComponent(String(requestParameters.cameraId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * create a new camera playback
     * Create Playback
     */
    async camerasCameraIdPlaybackPost(requestParameters: CamerasCameraIdPlaybackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.camerasCameraIdPlaybackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get camera playback codecs
     * Get Playbaack Codecs
     */
    async playbackPlaybackIdCodecsGetRaw(requestParameters: PlaybackPlaybackIdCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.playbackId === null || requestParameters.playbackId === undefined) {
            throw new runtime.RequiredError('playbackId','Required parameter requestParameters.playbackId was null or undefined when calling playbackPlaybackIdCodecsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playback/{playbackId}/codecs`.replace(`{${"playbackId"}}`, encodeURIComponent(String(requestParameters.playbackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get camera playback codecs
     * Get Playbaack Codecs
     */
    async playbackPlaybackIdCodecsGet(requestParameters: PlaybackPlaybackIdCodecsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.playbackPlaybackIdCodecsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * send playback offer for camera by id
     * Send playback offer
     */
    async playbackPlaybackIdSdpPostRaw(requestParameters: PlaybackPlaybackIdSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAnswerST>> {
        if (requestParameters.playbackId === null || requestParameters.playbackId === undefined) {
            throw new runtime.RequiredError('playbackId','Required parameter requestParameters.playbackId was null or undefined when calling playbackPlaybackIdSdpPost.');
        }

        if (requestParameters.offer === null || requestParameters.offer === undefined) {
            throw new runtime.RequiredError('offer','Required parameter requestParameters.offer was null or undefined when calling playbackPlaybackIdSdpPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/playback/{playbackId}/sdp`.replace(`{${"playbackId"}}`, encodeURIComponent(String(requestParameters.playbackId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsOfferBodySTToJSON(requestParameters.offer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAnswerSTFromJSON(jsonValue));
    }

    /**
     * send playback offer for camera by id
     * Send playback offer
     */
    async playbackPlaybackIdSdpPost(requestParameters: PlaybackPlaybackIdSdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAnswerST> {
        const response = await this.playbackPlaybackIdSdpPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
